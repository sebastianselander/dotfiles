;; Shoutout slotThe (https://gitlab.com/slotThe/dotfiles/-/blob/master/kmonad/.config/kmonad/x220-slot-us-colemak-dh-z.kbd)
;; config mostly stolen from them!

;; Set input/output sinks, as well as the X11 dependent part of the
;; config.
;;
;; After setting the proper input device, set a faster default key
;; repeat with `xset'.  First number is how long (in ms) the key has to
;; be held down before repeating starts.  Second number is repetitions
;; per second after that.
;;
;; I then set my compose key, namely Alt_R (which is a key that will not
;; be on a layout by itself, but KMonad uses it internally for Unicode
;; things).
;;
;; The name given as the first argument to `uinput-sink' will be the
;; name given to the virtual keyboard that KMonad creates.


(defcfg
  input (device-file "/dev/input/by-path/platform-i8042-serio-0-event-kbd")
  output (uinput-sink
            "KMonad kbd"
            "sleep 0.2s; xset r rate 230 55; sleep 0.2s; setxkbmap -option compose:menu")
  cmp-seq ralt
  cmp-seq-delay 5

  fallthrough true
  allow-cmd true
)

;; Template for a new layer:
;;
;; (deflayer name
;;    _   _    _    _    _    _    _    _    _    _    _    -    =    _
;;    _   _    _    _    _    _    _    _    _    _    _    _    _    _
;;    _   _    _    _    _    _    _    _    _    _    _    _    _
;;    _   _    _    _    _    _    _    _    _    _    _    _    _   
;;    _   _    _         _                   _    _    _    _    _    _    _  
;; )

;; `tap-next': Button1 is for tapping, Button2 is for holding.  Once the
;;  button is pressed kmonad waits for the next input.  If it's the
;;  release of the same button, Button1 gets tapped.  If it's the
;;  pressing of another key (Key1), Button2 gets pressed *before*
;;  handling the press of Key1.
;;
;; `tap-hold-next': This works like `tap-next', but takes an additional
;; timeout, after which Button2 is also pressed.  This prevents
;; situations when you want to use a modifier but then change your mind,
;; but also don't want to emit Button1 when the key is released.
;;
;; `tap-hold-next-release': Works like `tap-hold-next' in the timeout
;; department, but decides which key to press before the timeout in a
;; slightly different way.  Instead of looking at the key (Key1) that we
;; pressed down, we look at keys that were pressed `after' us¹.  If such
;; a key is released before we release Key1, Button2 is pressed.  If the
;; next event is the release of Key1, we tap Button1 instead.  This
;; (while sounding a bit weird) is very comfortable when applied to keys
;; that get pressed reasonable often when typing normally.  ¹: This is
;; important in that no key that was pressed before Key1 has any
;; influence over this.

;; Layer shortcuts
(defalias
  sym (layer-toggle sym)
  se (around (cmd-button "setxkbmap se")
             (layer-switch qwertyse))
  us (around (cmd-button "setxkbmap us")
             (layer-switch qwertyus))
)

(defalias
  ec (tap-next esc lctl)
)

(defalias
  sl (sticky-key 500 lsft)
  sr (sticky-key 500 lsft))


;; Haskell stuff

(defalias
  >>= #( > > = )
  =<< #( = < < )
  <*> #( < * > )
  *>  #( * >   )
  <*  #( < *   )
  <$> #( < $ > )
  <&> #( < & > )
  <|> #( < | > )
  <-  #( < -   )
  ->  #( - >   )
  =>  #( = >   )
  ::  #( : :   )
  prg #({ - # spc L A N G U A G E spc # - } left left left :delay 5)
)


;;; Layers

;; First up is the source (base) layer; this is used to set the default
;; keys that will be overwritten later.  It is `not' a layer that will
;; be used in the actual layout.

;; I do not include the f-keys because I do not want to remap them in any layer

(defsrc
  esc
  `    1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft 102d z    x    c    v    b    n    m    ,    .    /    rsft
  lctl wkup lmet lalt           spc            ralt rctl      up  
                                                         lft  down rght
)

;; qwerty layer us

(deflayer qwertyus
  esc
  `    1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  @ec  a    s    d    f    g    h    j    k    l    ;    '    ret
  @sl  <    z    x    c    v    b    n    m    ,    .    /    @sr  
  lctl wkup lmet lalt           spc            @sym rctl      up 
                                                         lft  down rght
)

;; qwerty layer se

(deflayer qwertyse
  esc
  `    1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  @ec  a    s    d    f    g    h    j    k    l    ;    '    ret
  @sl  102d z    x    c    v    b    n    m    ,    .    /    @sr  
  lctl wkup lmet lalt           spc            @sym rctl      up
                                                         lft  down rght
)
;; Symbol layer

(deflayer sym
  esc
  §    @us  @se  3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    [    ]    t    y    u    i    o    @prg å    XX   XX
  @ec  &    *    {    }    g    left down up   rght ö    ä    ret
  @sl  <    z    ^    v    @=<< @>>= n    @::  @<-  @->  @=>  @sr  
  lctl wkup lmet lalt           spc            @sym rctl      up
                                                         lft  down rght
)
